"use strict";require("colors");var e=require("fs"),t=require("path"),r=require("https-proxy-agent"),i=require("prompts"),o=require("dotenv"),s=require("zod"),n=require("url"),a=require("http"),l=require("https"),c=require("tarn"),p=require("uuid"),h=require("node:path"),u=require("puppeteer"),d=require("node:crypto"),g=require("jsdom"),m=require("dompurify"),f=require("cors"),v=require("express"),y=require("multer"),w=require("express-rate-limit"),b="undefined"!=typeof document?document.currentScript:null;function E(e){var t=Object.create(null);return e&&Object.keys(e).forEach((function(r){if("default"!==r){var i=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,i.get?i:{enumerable:!0,get:function(){return e[r]}})}})),t.default=e,Object.freeze(t)}var T=E(n);const S={core:["highcharts","highcharts-more","highcharts-3d"],modules:["stock","map","gantt","exporting","export-data","parallel-coordinates","accessibility","annotations-advanced","boost-canvas","boost","data","data-tools","draggable-points","static-scale","broken-axis","heatmap","tilemap","tiledwebmap","timeline","treemap","treegraph","item-series","drilldown","histogram-bellcurve","bullet","funnel","funnel3d","geoheatmap","pyramid3d","networkgraph","overlapping-datalabels","pareto","pattern-fill","pictorial","price-indicator","sankey","arc-diagram","dependency-wheel","series-label","solid-gauge","sonification","stock-tools","streamgraph","sunburst","variable-pie","variwide","vector","venn","windbarb","wordcloud","xrange","no-data-to-display","drag-panes","debugger","dumbbell","lollipop","cylinder","organization","dotplot","marker-clusters","hollowcandlestick","heikinashi","flowmap"],indicators:["indicators-all"]},x={puppeteer:{args:{value:[],type:"string[]",description:"Arguments array to send to Puppeteer."}},highcharts:{version:{value:"latest",type:"string",envLink:"HIGHCHARTS_VERSION",description:"The Highcharts version to be used."},cdnURL:{value:"https://code.highcharts.com/",type:"string",envLink:"HIGHCHARTS_CDN_URL",description:"The CDN URL for Highcharts scripts to be used."},coreScripts:{value:S.core,type:"string[]",envLink:"HIGHCHARTS_CORE_SCRIPTS",description:"The core Highcharts scripts to fetch."},moduleScripts:{value:S.modules,type:"string[]",envLink:"HIGHCHARTS_MODULE_SCRIPTS",description:"The modules of Highcharts to fetch."},indicatorScripts:{value:S.indicators,type:"string[]",envLink:"HIGHCHARTS_INDICATOR_SCRIPTS",description:"The indicators of Highcharts to fetch."},customScripts:{value:["https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js","https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.34/moment-timezone-with-data.min.js"],type:"string[]",description:"Additional custom scripts or dependencies to fetch."},forceFetch:{value:!1,type:"boolean",envLink:"HIGHCHARTS_FORCE_FETCH",description:"The flag to determine whether to refetch all scripts after each server rerun."},cachePath:{value:".cache",type:"string",envLink:"HIGHCHARTS_CACHE_PATH",description:"The path to the cache directory. It is used to store the Highcharts scripts and custom scripts."}},export:{infile:{value:!1,type:"string",description:"The input file should include a name and a type (json or svg). It must be correctly formatted as a JSON or SVG file."},instr:{value:!1,type:"string",description:"Input, provided in the form of a stringified JSON or SVG file, will override the --infile option."},options:{value:!1,type:"string",description:"An alias for the --instr option."},outfile:{value:!1,type:"string",description:"The output filename along with a type (jpeg, png, pdf, or svg). This will ignore the --type flag."},type:{value:"png",type:"string",envLink:"EXPORT_TYPE",description:"The file export format. It can be jpeg, png, pdf, or svg."},constr:{value:"chart",type:"string",envLink:"EXPORT_CONSTR",description:"The constructor to use. Can be chart, stockChart, mapChart, or ganttChart."},defaultHeight:{value:400,type:"number",envLink:"EXPORT_DEFAULT_HEIGHT",description:"the default height of the exported chart. Used when no value is set."},defaultWidth:{value:600,type:"number",envLink:"EXPORT_DEFAULT_WIDTH",description:"The default width of the exported chart. Used when no value is set."},defaultScale:{value:1,type:"number",envLink:"EXPORT_DEFAULT_SCALE",description:"The default scale of the exported chart. Used when no value is set."},height:{value:!1,type:"number",description:"The height of the exported chart, overriding the option in the chart settings."},width:{value:!1,type:"number",description:"The width of the exported chart, overriding the option in the chart settings."},scale:{value:!1,type:"number",description:"The scale of the exported chart, overriding the option in the chart settings. Ranges between 0.1 and 5.0."},globalOptions:{value:!1,type:"string",description:"Either a stringified JSON or a filename containing options to be passed into the Highcharts.setOptions."},themeOptions:{value:!1,type:"string",description:"Either a stringified JSON or a filename containing theme options to be passed into the Highcharts.setOptions."},batch:{value:!1,type:"string",description:'Initiates a batch job with a string containing input/output pairs: "in=out;in=out;...".'},rasterizationTimeout:{value:1500,type:"number",envLink:"EXPORT_RASTERIZATION_TIMEOUT",description:"The duration in milliseconds to wait for rendering a webpage."}},customLogic:{allowCodeExecution:{value:!1,type:"boolean",envLink:"CUSTOM_LOGIC_ALLOW_CODE_EXECUTION",description:"Controls whether the execution of arbitrary code is allowed during the exporting process."},allowFileResources:{value:!1,type:"boolean",envLink:"CUSTOM_LOGIC_ALLOW_FILE_RESOURCES",description:"Controls the ability to inject resources from the filesystem. This setting has no effect when running as a server."},customCode:{value:!1,type:"string",description:"Custom code to execute before chart initialization. It can be a function, code wrapped within a function, or a filename with the .js extension."},callback:{value:!1,type:"string",description:"JavaScript code to run during construction. It can be a function or a filename with the .js extension."},resources:{value:!1,type:"string",description:"Additional resource in the form of a stringified JSON, which may contain files, js, and css sections."},loadConfig:{value:!1,type:"string",legacyName:"fromFile",description:"A file containing a pre-defined configuration to use."},createConfig:{value:!1,type:"string",description:"Enables setting options through a prompt and saving them in a provided config file."}},server:{enable:{value:!0,type:"boolean",envLink:"SERVER_ENABLE",cliName:"enableServer",description:"When set to true, the server starts on the local IP address 0.0.0.0."},host:{value:"0.0.0.0",type:"string",envLink:"SERVER_HOST",description:"The hostname of the server. Additionally, it starts a server on the provided hostname."},port:{value:8080,type:"number",envLink:"SERVER_PORT",description:"The server port when enabled."},benchmarking:{value:!1,type:"boolean",envLink:"SERVER_BENCHMARKING",cliName:"serverBenchmarking",description:"Indicates whether to display the duration, in milliseconds, of specific actions that occur on the server while serving a request."},proxy:{host:{value:!1,type:"string",envLink:"SERVER_PROXY_HOST",cliName:"proxyHost",description:"The host of the proxy server to use, if it exists."},port:{value:8080,type:"number",envLink:"SERVER_PROXY_PORT",cliName:"proxyPort",description:"The port of the proxy server to use, if it exists."},timeout:{value:5e3,type:"number",envLink:"SERVER_PROXY_TIMEOUT",cliName:"proxyTimeout",description:"The timeout for the proxy server to use, if it exists."}},rateLimiting:{enable:{value:!1,type:"boolean",envLink:"SERVER_RATE_LIMITING_ENABLE",cliName:"enableRateLimiting",description:"Enables rate limiting for the server."},maxRequests:{value:10,type:"number",envLink:"SERVER_RATE_LIMITING_MAX_REQUESTS",legacyName:"rateLimit",description:"The maximum number of requests allowed in one minute."},window:{value:1,type:"number",envLink:"SERVER_RATE_LIMITING_WINDOW",description:"The time window, in minutes, for the rate limiting."},delay:{value:0,type:"number",envLink:"SERVER_RATE_LIMITING_DELAY",description:"The delay duration for each successive request before reaching the maximum limit."},trustProxy:{value:!1,type:"boolean",envLink:"SERVER_RATE_LIMITING_TRUST_PROXY",description:"Set this to true if the server is behind a load balancer."},skipKey:{value:!1,type:"string",envLink:"SERVER_RATE_LIMITING_SKIP_KEY",description:"Allows bypassing the rate limiter and should be provided with the skipToken argument."},skipToken:{value:!1,type:"string",envLink:"SERVER_RATE_LIMITING_SKIP_TOKEN",description:"Allows bypassing the rate limiter and should be provided with the skipKey argument."}},ssl:{enable:{value:!1,type:"boolean",envLink:"SERVER_SSL_ENABLE",cliName:"enableSsl",description:"Enables or disables the SSL protocol."},force:{value:!1,type:"boolean",envLink:"SERVER_SSL_FORCE",cliName:"sslForce",legacyName:"sslOnly",description:"When set to true, the server is forced to serve only over HTTPS."},port:{value:443,type:"number",envLink:"SERVER_SSL_PORT",cliName:"sslPort",description:"The port on which to run the SSL server."},certPath:{value:!1,type:"string",envLink:"SERVER_SSL_CERT_PATH",legacyName:"sslPath",description:"The path to the SSL certificate/key file."}}},pool:{minWorkers:{value:4,type:"number",envLink:"POOL_MIN_WORKERS",description:"The number of minimum and initial pool workers to spawn."},maxWorkers:{value:8,type:"number",envLink:"POOL_MAX_WORKERS",legacyName:"workers",description:"The number of maximum pool workers to spawn."},workLimit:{value:40,type:"number",envLink:"POOL_WORK_LIMIT",description:"The number of work pieces that can be performed before restarting the worker process."},acquireTimeout:{value:5e3,type:"number",envLink:"POOL_ACQUIRE_TIMEOUT",description:"The duration, in milliseconds, to wait for acquiring a resource."},createTimeout:{value:5e3,type:"number",envLink:"POOL_CREATE_TIMEOUT",description:"The duration, in milliseconds, to wait for creating a resource."},destroyTimeout:{value:5e3,type:"number",envLink:"POOL_DESTROY_TIMEOUT",description:"The duration, in milliseconds, to wait for destroying a resource."},idleTimeout:{value:3e4,type:"number",envLink:"POOL_IDLE_TIMEOUT",description:"The duration, in milliseconds, after which an idle resource is destroyed."},createRetryInterval:{value:200,type:"number",envLink:"POOL_CREATE_RETRY_INTERVAL",description:"The duration, in milliseconds, to wait before retrying the create process in case of a failure."},reaperInterval:{value:1e3,type:"number",envLink:"POOL_REAPER_INTERVAL",description:"The duration, in milliseconds, after which the check for idle resources to destroy is triggered."},benchmarking:{value:!1,type:"boolean",envLink:"POOL_BENCHMARKING",cliName:"poolBenchmarking",description:"Indicate whether to show statistics for the pool of resources or not."}},logging:{level:{value:4,type:"number",envLink:"LOGGING_LEVEL",cliName:"logLevel",description:"The logging level to be used."},file:{value:"highcharts-export-server.log",type:"string",envLink:"LOGGING_FILE",cliName:"logFile",description:"The name of a log file. The logDest option also needs to be set to enable file logging."},dest:{value:"log/",type:"string",envLink:"LOGGING_DEST",cliName:"logDest",description:"The path to store log files. This also enables file logging."}},ui:{enable:{value:!1,type:"boolean",envLink:"UI_ENABLE",cliName:"enableUi",description:"Enables or disables the user interface (UI) for the export server."},route:{value:"/",type:"string",envLink:"UI_ROUTE",cliName:"uiRoute",description:"The endpoint route to which the user interface (UI) should be attached."}},other:{nodeEnv:{value:"production",type:"string",envLink:"OTHER_NODE_ENV",description:"The type of Node.js environment."},listenToProcessExits:{value:!0,type:"boolean",envLink:"OTHER_LISTEN_TO_PROCESS_EXITS",description:"Decides whether or not to attach process.exit handlers."},noLogo:{value:!1,type:"boolean",envLink:"OTHER_NO_LOGO",description:"Skip printing the logo on a startup. Will be replaced by a simple text."}}},R={puppeteer:[{type:"list",name:"args",message:"Puppeteer arguments",initial:x.puppeteer.args.value.join(","),separator:","}],highcharts:[{type:"text",name:"version",message:"Highcharts version",initial:x.highcharts.version.value},{type:"text",name:"cdnURL",message:"The URL of CDN",initial:x.highcharts.cdnURL.value},{type:"multiselect",name:"coreScripts",message:"Available core scripts",instructions:"Space: Select specific, A: Select all, Enter: Confirm.",choices:x.highcharts.coreScripts.value},{type:"multiselect",name:"moduleScripts",message:"Available module scripts",instructions:"Space: Select specific, A: Select all, Enter: Confirm.",choices:x.highcharts.moduleScripts.value},{type:"multiselect",name:"indicatorScripts",message:"Available indicator scripts",instructions:"Space: Select specific, A: Select all, Enter: Confirm.",choices:x.highcharts.indicatorScripts.value},{type:"list",name:"customScripts",message:"Custom scripts",initial:x.highcharts.customScripts.value.join(","),separator:","},{type:"toggle",name:"forceFetch",message:"Force re-fetch the scripts",initial:x.highcharts.forceFetch.value},{type:"text",name:"cachePath",message:"The path to the cache directory",initial:x.highcharts.cachePath.value}],export:[{type:"select",name:"type",message:"The default export file type",hint:`Default: ${x.export.type.value}`,initial:0,choices:["png","jpeg","pdf","svg"]},{type:"select",name:"constr",message:"The default constructor for Highcharts",hint:`Default: ${x.export.constr.value}`,initial:0,choices:["chart","stockChart","mapChart","ganttChart"]},{type:"number",name:"defaultHeight",message:"The default fallback height of the exported chart",initial:x.export.defaultHeight.value},{type:"number",name:"defaultWidth",message:"The default fallback width of the exported chart",initial:x.export.defaultWidth.value},{type:"number",name:"defaultScale",message:"The default fallback scale of the exported chart",initial:x.export.defaultScale.value,min:.1,max:5},{type:"number",name:"rasterizationTimeout",message:"The rendering webpage timeout in milliseconds",initial:x.export.rasterizationTimeout.value}],customLogic:[{type:"toggle",name:"allowCodeExecution",message:"Enable execution of custom code",initial:x.customLogic.allowCodeExecution.value},{type:"toggle",name:"allowFileResources",message:"Enable file resources",initial:x.customLogic.allowFileResources.value}],server:[{type:"toggle",name:"enable",message:"Starts the server on 0.0.0.0",initial:x.server.enable.value},{type:"text",name:"host",message:"Server hostname",initial:x.server.host.value},{type:"number",name:"port",message:"Server port",initial:x.server.port.value},{type:"toggle",name:"benchmarking",message:"Enable server benchmarking",initial:x.server.benchmarking.value},{type:"text",name:"proxy.host",message:"The host of the proxy server to use",initial:x.server.proxy.host.value},{type:"number",name:"proxy.port",message:"The port of the proxy server to use",initial:x.server.proxy.port.value},{type:"number",name:"proxy.timeout",message:"The timeout for the proxy server to use",initial:x.server.proxy.timeout.value},{type:"toggle",name:"rateLimiting.enable",message:"Enable rate limiting",initial:x.server.rateLimiting.enable.value},{type:"number",name:"rateLimiting.maxRequests",message:"The maximum requests allowed per minute",initial:x.server.rateLimiting.maxRequests.value},{type:"number",name:"rateLimiting.window",message:"The rate-limiting time window in minutes",initial:x.server.rateLimiting.window.value},{type:"number",name:"rateLimiting.delay",message:"The delay for each successive request before reaching the maximum",initial:x.server.rateLimiting.delay.value},{type:"toggle",name:"rateLimiting.trustProxy",message:"Set to true if behind a load balancer",initial:x.server.rateLimiting.trustProxy.value},{type:"text",name:"rateLimiting.skipKey",message:"Allows bypassing the rate limiter when provided with the skipToken argument",initial:x.server.rateLimiting.skipKey.value},{type:"text",name:"rateLimiting.skipToken",message:"Allows bypassing the rate limiter when provided with the skipKey argument",initial:x.server.rateLimiting.skipToken.value},{type:"toggle",name:"ssl.enable",message:"Enable SSL protocol",initial:x.server.ssl.enable.value},{type:"toggle",name:"ssl.force",message:"Force serving only over HTTPS",initial:x.server.ssl.force.value},{type:"number",name:"ssl.port",message:"SSL server port",initial:x.server.ssl.port.value},{type:"text",name:"ssl.certPath",message:"The path to find the SSL certificate/key",initial:x.server.ssl.certPath.value}],pool:[{type:"number",name:"minWorkers",message:"The initial number of workers to spawn",initial:x.pool.minWorkers.value},{type:"number",name:"maxWorkers",message:"The maximum number of workers to spawn",initial:x.pool.maxWorkers.value},{type:"number",name:"workLimit",message:"The pieces of work that can be performed before restarting a Puppeteer process",initial:x.pool.workLimit.value},{type:"number",name:"acquireTimeout",message:"The number of milliseconds to wait for acquiring a resource",initial:x.pool.acquireTimeout.value},{type:"number",name:"createTimeout",message:"The number of milliseconds to wait for creating a resource",initial:x.pool.createTimeout.value},{type:"number",name:"destroyTimeout",message:"The number of milliseconds to wait for destroying a resource",initial:x.pool.destroyTimeout.value},{type:"number",name:"idleTimeout",message:"The number of milliseconds after an idle resource is destroyed",initial:x.pool.idleTimeout.value},{type:"number",name:"createRetryInterval",message:"The retry interval in milliseconds after a create process fails",initial:x.pool.createRetryInterval.value},{type:"number",name:"reaperInterval",message:"The reaper interval in milliseconds after triggering the check for idle resources to destroy",initial:x.pool.reaperInterval.value},{type:"toggle",name:"benchmarking",message:"Enable benchmarking for a resource pool",initial:x.pool.benchmarking.value}],logging:[{type:"number",name:"level",message:"The log level (0: silent, 1: error, 2: warning, 3: notice, 4: verbose, 5: benchmark)",initial:x.logging.level.value,round:0,min:0,max:5},{type:"text",name:"file",message:"A log file name. Set with the --logDest to enable file logging",initial:x.logging.file.value},{type:"text",name:"dest",message:"The path to log files. Enables file logging",initial:x.logging.dest.value}],ui:[{type:"toggle",name:"enable",message:"Enable UI for the export server",initial:x.ui.enable.value},{type:"text",name:"route",message:"A route to attach the UI",initial:x.ui.route.value}],other:[{type:"text",name:"nodeEnv",message:"The type of Node.js environment",initial:x.other.nodeEnv.value},{type:"toggle",name:"listenToProcessExits",message:"Set to false to skip attaching process.exit handlers",initial:x.other.listenToProcessExits.value},{type:"toggle",name:"noLogo",message:"Skip printing the logo on startup. Replaced by simple text",initial:x.other.noLogo.value}]},L=["options","globalOptions","themeOptions","resources","payload"],k={},_=(e,t="")=>{Object.keys(e).forEach((r=>{if(!["puppeteer","highcharts"].includes(r)){const i=e[r];void 0===i.value?_(i,`${t}.${r}`):(k[i.cliName||r]=`${t}.${r}`.substring(1),void 0!==i.legacyName&&(k[i.legacyName]=`${t}.${r}`.substring(1)))}}))};_(x),o.config();const O=e=>s.z.string().transform((t=>t.split(",").map((e=>e.trim())).filter((t=>e.includes(t))))).transform((e=>e.length?e:void 0)),I=()=>s.z.enum(["true","false",""]).transform((e=>""!==e?"true"===e:void 0)),C=e=>s.z.enum([...e,""]).transform((e=>""!==e?e:void 0)),A=()=>s.z.string().trim().refine((e=>!["false","undefined","null","NaN"].includes(e)||""===e),(e=>({message:`The string contains forbidden values, received '${e}'`}))).transform((e=>""!==e?e:void 0)),N=()=>s.z.string().trim().refine((e=>""===e||!isNaN(parseFloat(e))&&parseFloat(e)>0),(e=>({message:`The value must be numeric and positive, received '${e}'`}))).transform((e=>""!==e?parseFloat(e):void 0)),P=()=>s.z.string().trim().refine((e=>""===e||!isNaN(parseFloat(e))&&parseFloat(e)>=0),(e=>({message:`The value must be numeric and non-negative, received '${e}'`}))).transform((e=>""!==e?parseFloat(e):void 0)),$=s.z.object({HIGHCHARTS_VERSION:s.z.string().trim().refine((e=>/^(latest|\d+(\.\d+){0,2})$/.test(e)||""===e),(e=>({message:`HIGHCHARTS_VERSION must be 'latest', a major version, or in the form XX.YY.ZZ, received '${e}'`}))).transform((e=>""!==e?e:void 0)),HIGHCHARTS_CDN_URL:s.z.string().trim().refine((e=>e.startsWith("https://")||e.startsWith("http://")||""===e),(e=>({message:`Invalid value for HIGHCHARTS_CDN_URL. It should start with http:// or https://, received '${e}'`}))).transform((e=>""!==e?e:void 0)),HIGHCHARTS_CORE_SCRIPTS:O(S.core),HIGHCHARTS_MODULE_SCRIPTS:O(S.modules),HIGHCHARTS_INDICATOR_SCRIPTS:O(S.indicators),HIGHCHARTS_FORCE_FETCH:I(),HIGHCHARTS_CACHE_PATH:A(),HIGHCHARTS_ADMIN_TOKEN:A(),EXPORT_TYPE:C(["jpeg","png","pdf","svg"]),EXPORT_CONSTR:C(["chart","stockChart","mapChart","ganttChart"]),EXPORT_DEFAULT_HEIGHT:N(),EXPORT_DEFAULT_WIDTH:N(),EXPORT_DEFAULT_SCALE:N(),EXPORT_RASTERIZATION_TIMEOUT:P(),CUSTOM_LOGIC_ALLOW_CODE_EXECUTION:I(),CUSTOM_LOGIC_ALLOW_FILE_RESOURCES:I(),SERVER_ENABLE:I(),SERVER_HOST:A(),SERVER_PORT:N(),SERVER_BENCHMARKING:I(),SERVER_PROXY_HOST:A(),SERVER_PROXY_PORT:N(),SERVER_PROXY_TIMEOUT:P(),SERVER_RATE_LIMITING_ENABLE:I(),SERVER_RATE_LIMITING_MAX_REQUESTS:P(),SERVER_RATE_LIMITING_WINDOW:P(),SERVER_RATE_LIMITING_DELAY:P(),SERVER_RATE_LIMITING_TRUST_PROXY:I(),SERVER_RATE_LIMITING_SKIP_KEY:A(),SERVER_RATE_LIMITING_SKIP_TOKEN:A(),SERVER_SSL_ENABLE:I(),SERVER_SSL_FORCE:I(),SERVER_SSL_PORT:N(),SERVER_SSL_CERT_PATH:A(),POOL_MIN_WORKERS:P(),POOL_MAX_WORKERS:P(),POOL_WORK_LIMIT:N(),POOL_ACQUIRE_TIMEOUT:P(),POOL_CREATE_TIMEOUT:P(),POOL_DESTROY_TIMEOUT:P(),POOL_IDLE_TIMEOUT:P(),POOL_CREATE_RETRY_INTERVAL:P(),POOL_REAPER_INTERVAL:P(),POOL_BENCHMARKING:I(),LOGGING_LEVEL:s.z.string().trim().refine((e=>""===e||!isNaN(parseFloat(e))&&parseFloat(e)>=0&&parseFloat(e)<=5),(e=>({message:`Invalid value for LOGGING_LEVEL. We only accept values from 0 to 5 as logging levels, received '${e}'`}))).transform((e=>""!==e?parseFloat(e):void 0)),LOGGING_FILE:A(),LOGGING_DEST:A(),UI_ENABLE:I(),UI_ROUTE:A(),OTHER_NODE_ENV:C(["development","production","test"]),OTHER_LISTEN_TO_PROCESS_EXITS:I(),OTHER_NO_LOGO:I()}).partial().parse(process.env),H=["red","yellow","blue","gray","green"];let j={toConsole:!0,toFile:!1,pathCreated:!1,levelsDesc:[{title:"error",color:H[0]},{title:"warning",color:H[1]},{title:"notice",color:H[2]},{title:"verbose",color:H[3]},{title:"benchmark",color:H[4]}],listeners:[]};for(const[e,t]of Object.entries(x.logging))j[e]=t.value;const U=(t,r)=>{j.toFile&&(j.pathCreated||(!e.existsSync(j.dest)&&e.mkdirSync(j.dest),j.pathCreated=!0),e.appendFile(`${j.dest}${j.file}`,[r].concat(t).join(" ")+"\n",(e=>{e&&(console.log(`[logger] Unable to write to log file: ${e}`),j.toFile=!1)})))},F=(...e)=>{const[t,...r]=e,{level:i,levelsDesc:o}=j;if(5!==t&&(0===t||t>i||i>o.length))return;const s=`${(new Date).toString().split("(")[0].trim()} [${o[t-1].title}] -`;j.listeners.forEach((e=>{e(s,r.join(" "))})),j.toConsole&&console.log.apply(void 0,[s.toString()[j.levelsDesc[t-1].color]].concat(r)),U(r,s)},G=(e,t,r)=>{const i=r||t.message,{level:o,levelsDesc:s}=j;if(0===e||e>o||o>s.length)return;const n=`${(new Date).toString().split("(")[0].trim()} [${s[e-1].title}] -`,a=t.message!==t.stackMessage||void 0===t.stackMessage?t.stack:t.stack.split("\n").slice(1).join("\n"),l=[i,"\n",a];j.toConsole&&console.log.apply(void 0,[n.toString()[j.levelsDesc[e-1].color]].concat([i[H[e-1]],"\n",a])),j.listeners.forEach((e=>{e(n,l.join(" "))})),U(l,n)},M=e=>{e>=0&&e<=j.levelsDesc.length&&(j.level=e)},q=(e,t)=>{if(j={...j,dest:e||j.dest,file:t||j.file,toFile:!0},0===j.dest.length)return F(1,"[logger] File logging initialization: no path supplied.");j.dest.endsWith("/")||(j.dest+="/")},D=n.fileURLToPath(new URL("../.","undefined"==typeof document?require("url").pathToFileURL(__filename).href:b&&b.src||new URL("index.cjs",document.baseURI).href)),V=(e,t)=>{const r=["png","jpeg","pdf","svg"];if(t){const i=t.split(".").pop();"jpg"===i?e="jpeg":r.includes(i)&&e!==i&&(e=i)}return{"image/png":"png","image/jpeg":"jpeg","application/pdf":"pdf","image/svg+xml":"svg"}[e]||r.find((t=>t===e))||"png"},W=(t=!1,r)=>{const i=["js","css","files"];let o=t,s=!1;if(r&&t.endsWith(".json"))try{o=X(e.readFileSync(t,"utf8"))}catch(e){return G(2,e,"[cli] No resources found.")}else o=X(t),o&&!r&&delete o.files;for(const e in o)i.includes(e)?s||(s=!0):delete o[e];return s?(o.files&&(o.files=o.files.map((e=>e.trim())),(!o.files||o.files.length<=0)&&delete o.files),o):F(3,"[cli] No resources found.")};function X(e,t){try{const r=JSON.parse("string"!=typeof e?JSON.stringify(e):e);return"string"!=typeof r&&t?JSON.stringify(r):r}catch{return!1}}const z=e=>{if(null===e||"object"!=typeof e)return e;const t=Array.isArray(e)?[]:{};for(const r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=z(e[r]));return t},K=(e,t)=>JSON.stringify(e,((e,r)=>("string"==typeof r&&((r=r.trim()).startsWith("function(")||r.startsWith("function ("))&&r.endsWith("}")&&(r=t?`EXP_FUN${(r+"").replaceAll(/\n|\t|\r/g," ")}EXP_FUN`:void 0),"function"==typeof r?`EXP_FUN${(r+"").replaceAll(/\n|\t|\r/g," ")}EXP_FUN`:r))).replaceAll(/"EXP_FUN|EXP_FUN"/g,"");function J(){console.log("\nUsage of CLI arguments:".bold,"\n------",`\nFor more detailed information, visit the readme at: ${"https://github.com/highcharts/node-export-server#readme".bold.yellow}.`);const e=t=>{for(const[r,i]of Object.entries(t))if(Object.prototype.hasOwnProperty.call(i,"value")){let e=`  --${i.cliName||r} ${("<"+i.type+">").green} `;if(e.length<48)for(let t=e.length;t<48;t++)e+=".";console.log(e,i.description,`[Default: ${i.value.toString().bold}]`.blue)}else e(i)};Object.keys(x).forEach((t=>{["puppeteer","highcharts"].includes(t)||(console.log(`\n${t.toUpperCase()}`.red),e(x[t]))})),console.log("\n")}const B=e=>!["false","undefined","null","NaN","0",""].includes(e)&&!!e,Y=(t,r)=>{if(t&&"string"==typeof t)return(t=t.trim()).endsWith(".js")?!!r&&Y(e.readFileSync(t,"utf8")):t.startsWith("function()")||t.startsWith("function ()")||t.startsWith("()=>")||t.startsWith("() =>")?`(${t})()`:t.replace(/;$/,"")},Q=()=>{const e=process.hrtime.bigint();return()=>Number(process.hrtime.bigint()-e)/1e6};let Z={};const ee=()=>Z,te=(e,t,r=[])=>{const i=z(e);for(const[e,s]of Object.entries(t))i[e]="object"!=typeof(o=s)||Array.isArray(o)||null===o||r.includes(e)||void 0===i[e]?void 0!==s?s:i[e]:te(i[e],s,r);var o;return i};function re(e,t={},r=""){Object.keys(e).forEach((i=>{const o=e[i],s=t&&t[i];void 0===o.value?re(o,s,`${r}.${i}`):(void 0!==s&&(o.value=s),o.envLink in $&&void 0!==$[o.envLink]&&(o.value=$[o.envLink]))}))}function ie(e){let t={};for(const[r,i]of Object.entries(e))t[r]=Object.prototype.hasOwnProperty.call(i,"value")?i.value:ie(i);return t}function oe(e,t,r){for(;t.length>1;){const i=t.shift();return Object.prototype.hasOwnProperty.call(e,i)||(e[i]={}),e[i]=oe(Object.assign({},e[i]),t,r),e}return e[t[0]]=r,e}async function se(e,t={}){return new Promise(((r,i)=>{const o=(e=>e.startsWith("https")?l:a)(e);o.get(e,t,(e=>{let t="";e.on("data",(e=>{t+=e})),e.on("end",(()=>{t||i("Nothing was fetched from the URL."),e.text=t,r(e)}))})).on("error",(e=>{i(e)}))}))}class ne extends Error{constructor(e){super(),this.message=e,this.stackMessage=e}setError(e){return this.error=e,e.name&&(this.name=e.name),e.statusCode&&(this.statusCode=e.statusCode),e.stack&&(this.stackMessage=e.message,this.stack=e.stack),this}}const ae={cdnURL:"https://code.highcharts.com/",activeManifest:{},sources:"",hcVersion:""},le=e=>e.sources.substring(0,e.sources.indexOf("*/")).replace("/*","").replace("*/","").replace(/\n/g,"").trim(),ce=async(e,t,r,i=!1)=>{e.endsWith(".js")&&(e=e.substring(0,e.length-3)),F(4,`[cache] Fetching script - ${e}.js`);const o=await se(`${e}.js`,t);if(200===o.statusCode&&"string"==typeof o.text){if(r){r[e.replace(/(.*)\/|(.*)modules\/|stock\/(.*)indicators\/|maps\/(.*)modules\//gi,"")]=1}return o.text}if(i)throw new ne(`Could not fetch the ${e}.js. The script might not exist in the requested version (status code: ${o.statusCode}).`).setError(o);return F(2,`[cache] Could not fetch the ${e}.js. The script might not exist in the requested version.`),""},pe=async(t,i,o)=>{const s=t.version,n="latest"!==s&&s?`${s}/`:"",a=t.cdnURL||ae.cdnURL;F(3,`[cache] Updating cache version to Highcharts: ${n||"latest"}.`);const l={};try{return ae.sources=await(async(e,t,i,o,s)=>{let n;const a=o.host,l=o.port;if(a&&l)try{n=new r.HttpsProxyAgent({host:a,port:l})}catch(e){throw new ne("[cache] Could not create a Proxy Agent.").setError(e)}const c=n?{agent:n,timeout:$.SERVER_PROXY_TIMEOUT}:{},p=[...e.map((e=>ce(`${e}`,c,s,!0))),...t.map((e=>ce(`${e}`,c,s))),...i.map((e=>ce(`${e}`,c)))];return(await Promise.all(p)).join(";\n")})([...t.coreScripts.map((e=>`${a}${n}${e}`))],[...t.moduleScripts.map((e=>"map"===e?`${a}maps/${n}modules/${e}`:`${a}${n}modules/${e}`)),...t.indicatorScripts.map((e=>`${a}stock/${n}indicators/${e}`))],t.customScripts,i,l),ae.hcVersion=le(ae),e.writeFileSync(o,ae.sources),l}catch(e){throw new ne("[cache] Unable to update the local Highcharts cache.").setError(e)}},he=async r=>{const{highcharts:i,server:o}=r,s=t.join(D,i.cachePath);let n;const a=t.join(s,"manifest.json"),l=t.join(s,"sources.js");if(!e.existsSync(s)&&e.mkdirSync(s),!e.existsSync(a)||i.forceFetch)F(3,"[cache] Fetching and caching Highcharts dependencies."),n=await pe(i,o.proxy,l);else{let t=!1;const r=JSON.parse(e.readFileSync(a));if(r.modules&&Array.isArray(r.modules)){const e={};r.modules.forEach((t=>e[t]=1)),r.modules=e}const{coreScripts:s,moduleScripts:c,indicatorScripts:p}=i,h=s.length+c.length+p.length;r.version!==i.version?(F(2,"[cache] A Highcharts version mismatch in the cache, need to re-fetch."),t=!0):Object.keys(r.modules||{}).length!==h?(F(2,"[cache] The cache and the requested modules do not match, need to re-fetch."),t=!0):t=(c||[]).some((e=>{if(!r.modules[e])return F(2,`[cache] The ${e} is missing in the cache, need to re-fetch.`),!0})),t?n=await pe(i,o.proxy,l):(F(3,"[cache] Dependency cache is up to date, proceeding."),ae.sources=e.readFileSync(l,"utf8"),n=r.modules,ae.hcVersion=le(ae))}await(async(r,i)=>{const o={version:r.version,modules:i||{}};ae.activeManifest=o,F(3,"[cache] Writing a new manifest.");try{e.writeFileSync(t.join(D,r.cachePath,"manifest.json"),JSON.stringify(o),"utf8")}catch(e){throw new ne("[cache] Error writing the cache manifest.").setError(e)}})(i,n)},ue=()=>t.join(D,ee().highcharts.cachePath);var de=async e=>{const t=ee();t?.highcharts&&(t.highcharts.version=e),await he(t)},ge=()=>ae,me=()=>ae.hcVersion;const fe=d.randomBytes(64).toString("base64url"),ve=h.join("tmp",`puppeteer-${fe}`),ye=[`--user-data-dir=${h.join(ve,"profile")}`,"--autoplay-policy=user-gesture-required","--disable-background-networking","--disable-background-timer-throttling","--disable-backgrounding-occluded-windows","--disable-breakpad","--disable-client-side-phishing-detection","--disable-component-update","--disable-default-apps","--disable-dev-shm-usage","--disable-domain-reliability","--disable-extensions","--disable-features=AudioServiceOutOfProcess","--disable-hang-monitor","--disable-ipc-flooding-protection","--disable-notifications","--disable-offer-store-unmasked-wallet-cards","--disable-popup-blocking","--disable-print-preview","--disable-prompt-on-repost","--disable-renderer-backgrounding","--disable-session-crashed-bubble","--disable-setuid-sandbox","--disable-speech-api","--disable-sync","--hide-crash-restore-bubble","--hide-scrollbars","--ignore-gpu-blacklist","--metrics-recording-only","--mute-audio","--no-default-browser-check","--no-first-run","--no-pings","--no-sandbox","--no-zygote","--password-store=basic","--use-mock-keychain"],we=T.fileURLToPath(new URL(".","undefined"==typeof document?require("url").pathToFileURL(__filename).href:b&&b.src||new URL("index.cjs",document.baseURI).href)),be=e.readFileSync(we+"/../templates/template.html","utf8");let Ee;const Te=async e=>{await e.setContent(be),await e.addScriptTag({path:`${ue()}/sources.js`}),await e.evaluate((()=>window.setupHighcharts())),e.on("pageerror",(async t=>{await e.$eval("#container",((e,t)=>{window._displayErrors&&(e.innerHTML=t)}),`<h1>Chart input data error</h1>${t.toString()}`)}))},Se=async(e,t=!1)=>{try{t?(await e.goto("about:blank"),await Te(e)):await e.evaluate((()=>{document.body.innerHTML='<div id="chart-container"><div id="container"></div></div>'}))}catch(e){G(2,e,"[browser] Could not clear the content of the page.")}},xe=async()=>{if(!Ee)return!1;const e=await Ee.newPage();return await e.setCacheEnabled(!1),await Te(e),e};const Re=T.fileURLToPath(new URL(".","undefined"==typeof document?require("url").pathToFileURL(__filename).href:b&&b.src||new URL("index.cjs",document.baseURI).href)),Le=(e,t,r)=>e.evaluate(((e,t)=>window.triggerExport(e,t)),t,r);var ke=async(r,i,o)=>{const s=[],n=async e=>{for(const e of s)await e.dispose();await e.evaluate((()=>{const[,...e]=document.getElementsByTagName("script"),[,...t]=document.getElementsByTagName("style"),[...r]=document.getElementsByTagName("link");for(const i of[...e,...t,...r])i.remove()}))};try{F(4,"[export] Determining export path.");const a=o.export;await r.evaluate((()=>requestAnimationFrame((()=>{}))));const l=a?.options?.chart?.displayErrors&&ge().activeManifest.modules.debugger;let c;if(await r.evaluate((e=>window._displayErrors=e),l),i.indexOf&&(i.indexOf("<svg")>=0||i.indexOf("<?xml")>=0)){if(F(4,"[export] Treating as SVG."),"svg"===a.type)return i;c=!0,await r.setContent((e=>`\n<!DOCTYPE html>\n<html lang='en-US'>\n  <head>\n    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n    <title>Highcharts Export</title>\n  </head>\n  <style>\n    \n\nhtml, body {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n#table-div, #sliders, #datatable, #controls, .ld-row {\n  display: none;\n  height: 0;\n}\n\n#chart-container {\n  box-sizing: border-box;\n  margin: 0;\n  overflow: auto;\n  font-size: 0;\n}\n\n#chart-container > figure, div {\n  margin-top: 0 !important;\n  margin-bottom: 0 !important;\n}\n\n\n  </style>\n  <body>\n    <div id="chart-container">\n      ${e}\n    </div>\n  </body>\n</html>\n\n`)(i))}else F(4,"[export] Treating as config."),a.strInj?await Le(r,{chart:{height:a.height,width:a.width}},o):(i.chart.height=a.height,i.chart.width=a.width,await Le(r,i,o));const p=o.customLogic.resources;if(p){if(p.js&&s.push(await r.addScriptTag({content:p.js})),p.files)for(const t of p.files)try{const i=!t.startsWith("http");s.push(await r.addScriptTag(i?{content:e.readFileSync(t,"utf8")}:{url:t}))}catch(e){G(2,e,`[export] The JS file ${t} cannot be loaded.`)}if(p.css){let e=p.css.match(/@import\s*([^;]*);/g);if(e)for(let i of e)i&&(i=i.replace("url(","").replace("@import","").replace(/"/g,"").replace(/'/g,"").replace(/;/,"").replace(/\)/g,"").trim(),i.startsWith("http")?s.push(await r.addStyleTag({url:i})):o.customLogic.allowFileResources&&s.push(await r.addStyleTag({path:t.join(Re,i)})));s.push(await r.addStyleTag({content:p.css.replace(/@import\s*([^;]*);/g,"")||" "}))}}const h=c?await r.$eval("#chart-container svg:first-of-type",((e,t)=>({chartHeight:e.height.baseVal.value*t,chartWidth:e.width.baseVal.value*t})),parseFloat(a.scale)):await r.evaluate((()=>{const{chartHeight:e,chartWidth:t}=window.Highcharts.charts[0];return{chartHeight:e,chartWidth:t}})),u=Math.ceil(h?.chartHeight||a.height),d=Math.ceil(h?.chartWidth||a.width);await r.setViewport({height:u,width:d,deviceScaleFactor:c?1:parseFloat(a.scale)});const g=c?e=>{document.body.style.zoom=e,document.body.style.margin="0px"}:()=>{document.body.style.zoom=1};await r.evaluate(g,parseFloat(a.scale));const{height:m,width:f,x:v,y:y}=await(e=>e.$eval("#chart-container",(e=>{const{x:t,y:r,width:i,height:o}=e.getBoundingClientRect();return{x:t,y:r,width:i,height:Math.trunc(o>1?o:500)}})))(r);let w;if(c||await r.setViewport({width:Math.round(f),height:Math.round(m),deviceScaleFactor:parseFloat(a.scale)}),"svg"===a.type)w=await(e=>e.$eval("#container svg:first-of-type",(e=>e.outerHTML)))(r);else if(["png","jpeg"].includes(a.type))w=await((e,t,r,i,o)=>Promise.race([e.screenshot({type:t,encoding:r,clip:i,omitBackground:"png"==t}),new Promise(((e,t)=>setTimeout((()=>t(new ne("Rasterization timeout"))),o||1500)))]))(r,a.type,"base64",{width:d,height:u,x:v,y:y},a.rasterizationTimeout);else{if("pdf"!==a.type)throw new ne(`[export] Unsupported output format ${a.type}.`);w=await((e,t,r,i)=>e.pdf({height:t+1,width:r,encoding:i}))(r,u,d,"base64")}return await r.evaluate((()=>{if("undefined"!=typeof Highcharts){const e=Highcharts.charts;if(Array.isArray(e)&&e.length)for(const t of e)t&&t.destroy(),Highcharts.charts.shift()}})),await n(r),w}catch(e){return await n(r),e}};const _e={performedExports:0,exportAttempts:0,exportFromSvgAttempts:0,timeSpent:0,droppedExports:0,spentAverage:0};let Oe,Ie={},Ce=!1;const Ae={create:async()=>{let e=!1;const t=p.v4(),r=(new Date).getTime();try{if(e=await xe(),!e||e.isClosed())throw new ne("The page is invalid or closed.");F(3,`[pool] Successfully created a worker ${t} - took ${(new Date).getTime()-r} ms.`)}catch(e){throw new ne("Error encountered when creating a new page.").setError(e)}return{id:t,page:e,workCount:Math.round(Math.random()*(Ie.workLimit/2))}},validate:async e=>Ie.workLimit&&++e.workCount>Ie.workLimit?(F(3,`[pool] Worker failed validation: exceeded work limit (limit is ${Ie.workLimit}).`),!1):(await Se(e.page,!0),!0),destroy:e=>{F(3,`[pool] Destroying pool entry ${e.id}.`),e.page&&e.page.close()}},Ne=async e=>{if(Ie=e&&e.pool?{...e.pool}:{},Oe=e.puppeteerArgs,await(async e=>{const t=[...ye,...e||[]];if(!Ee){let e=0;const r=async()=>{try{F(3,`[browser] Attempting to get a browser instance (try ${++e}).`),Ee=await u.launch({headless:"new",args:t,userDataDir:"./tmp/",handleSIGINT:!1,handleSIGTERM:!1,handleSIGHUP:!1})}catch(t){if(G(1,t,"[browser] Failed to launch a browser instance."),!(e<25))throw t;F(3,`[browser] Retry to open a browser (${e} out of 25).`),await new Promise((e=>setTimeout(e,4e3))),await r()}};try{await r()}catch(e){throw new ne("[browser] Maximum retries to open a browser instance reached.").setError(e)}if(!Ee)throw new ne("[browser] Cannot find a browser to open.")}return Ee})(Oe),F(3,`[pool] Initializing pool with workers: min ${Ie.minWorkers}, max ${Ie.maxWorkers}.`),Ce)return F(4,"[pool] Already initialized, please kill it before creating a new one.");parseInt(Ie.minWorkers)>parseInt(Ie.maxWorkers)&&(Ie.minWorkers=Ie.maxWorkers);try{Ce=new c.Pool({...Ae,min:parseInt(Ie.minWorkers),max:parseInt(Ie.maxWorkers),acquireTimeoutMillis:Ie.acquireTimeout,createTimeoutMillis:Ie.createTimeout,destroyTimeoutMillis:Ie.destroyTimeout,idleTimeoutMillis:Ie.idleTimeout,createRetryIntervalMillis:Ie.createRetryInterval,reapIntervalMillis:Ie.reaperInterval,propagateCreateError:!1}),Ce.on("release",(async e=>{await Se(e.page,!1),F(4,`[pool] Releasing a worker with ID ${e.id}.`)})),Ce.on("destroySuccess",((e,t)=>{F(4,`[pool] Destroyed a worker with ID ${t.id}.`)}));const e=[];for(let t=0;t<Ie.minWorkers;t++)try{const t=await Ce.acquire().promise;e.push(t)}catch(e){G(2,e,"[pool] Could not create an initial resource.")}e.forEach((e=>{Ce.release(e)})),F(3,"[pool] The pool is ready"+(e.length?` with ${e.length} initial resources waiting.`:"."))}catch(e){throw new ne("[pool] Could not create the pool of workers.").setError(e)}};async function Pe(){if(F(3,"[pool] Killing pool with all workers and closing browser."),Ce){for(const e of Ce.used)Ce.release(e.resource);Ce.destroyed||(await Ce.destroy(),F(4,"[browser] Destroyed the pool of resources."))}await(async()=>{Ee?.isConnected()&&await Ee.close(),F(4,"[browser] Closed the browser.")})()}const $e=async(e,t)=>{let r;try{if(F(4,"[pool] Work received, starting to process."),++_e.exportAttempts,Ie.benchmarking&&He(),!Ce)throw new ne("Work received, but pool has not been started.");try{F(4,"[pool] Acquiring a worker handle.");const e=Q();r=await Ce.acquire().promise,t.server.benchmarking&&F(5,t.payload?.requestId?`[benchmark] Request with ID ${t.payload?.requestId} -`:"[benchmark]",`Acquired a worker handle: ${e()}ms.`)}catch(e){throw new ne("Error encountered when acquiring an available entry.").setError(e)}if(F(4,"[pool] Acquired a worker handle."),!r.page)throw new ne("Resolved worker page is invalid: the pool setup is wonky.");let i=(new Date).getTime();F(4,`[pool] Starting work on pool entry with ID ${r.id}.`);const o=Q(),s=await ke(r.page,e,t);if(s instanceof Error)throw"Rasterization timeout"===s.message&&(r.page.close(),r.page=await xe()),new ne("Error encountered during export.").setError(s);t.server.benchmarking&&F(5,t.payload?.requestId?`[benchmark] Request with ID ${t.payload?.requestId} -`:"[benchmark]",`Exported a chart sucessfully: ${o()}ms.`),Ce.release(r);const n=(new Date).getTime()-i;return _e.timeSpent+=n,_e.spentAverage=_e.timeSpent/++_e.performedExports,F(4,`[pool] Work completed in ${n} ms.`),{result:s,options:t}}catch(e){throw++_e.droppedExports,r&&Ce.release(r),new ne(`[pool] In pool.postWork: ${e.message}`).setError(e)}};function He(){const{min:e,max:t}=Ce;F(5,`[pool] The minimum number of resources allowed by pool: ${e}.`),F(5,`[pool] The maximum number of resources allowed by pool: ${t}.`),F(5,`[pool] The number of resources that are currently available: ${Ce.numFree()}.`),F(5,`[pool] The number of resources that are currently acquired: ${Ce.numUsed()}.`),F(5,`[pool] The number of callers waiting to acquire a resource: ${Ce.numPendingAcquires()}.`)}var je=()=>({min:Ce.min,max:Ce.max,available:Ce.numFree(),inUse:Ce.numUsed(),pendingAcquire:Ce.numPendingAcquires()}),Ue=()=>_e;let Fe=!1;const Ge=async(t,r)=>{F(4,"[chart] Starting the exporting process.");const i=((e,t={})=>{let r={};return e.svg?(r=z(t),r.export.type=e.type||e.export.type,r.export.scale=e.scale||e.export.scale,r.export.outfile=e.outfile||e.export.outfile,r.payload={svg:e.svg}):r=te(t,e,L),r.export.outfile=r.export?.outfile||`chart.${r.export?.type||"png"}`,r})(t,ee()),o=i.export;if(i.payload?.svg&&""!==i.payload.svg)try{F(4,"[chart] Attempting to export from a SVG input.");const e=Ve(function(e){const t=new g.JSDOM("").window;return m(t).sanitize(e)}(i.payload.svg),i,r);return++_e.exportFromSvgAttempts,e}catch(e){return r(new ne("[chart] Error loading SVG input.").setError(e))}if(o.infile&&o.infile.length)try{return F(4,"[chart] Attempting to export from an input file."),i.export.instr=e.readFileSync(o.infile,"utf8"),Ve(i.export.instr.trim(),i,r)}catch(e){return r(new ne("[chart] Error loading input file.").setError(e))}if(o.instr&&""!==o.instr||o.options&&""!==o.options)try{return F(4,"[chart] Attempting to export from a raw input."),B(i.customLogic?.allowCodeExecution)?De(i,r):"string"==typeof o.instr?Ve(o.instr.trim(),i,r):qe(i,o.instr||o.options,r)}catch(e){return r(new ne("[chart] Error loading raw input.").setError(e))}return r(new ne("[chart] No valid input specified. Check if at least one of the following parameters is correctly set: 'infile', 'instr', 'options', or 'svg'."))},Me=e=>{const{chart:t,exporting:r}=e.export?.options||X(e.export?.instr),i=X(e.export?.globalOptions);let o=e.export?.scale||r?.scale||i?.exporting?.scale||e.export?.defaultScale||1;o=Math.max(.1,Math.min(o,5)),o=((e,t=1)=>{const r=Math.pow(10,t||0);return Math.round(+e*r)/r})(o,2);const s={height:e.export?.height||r?.sourceHeight||t?.height||i?.exporting?.sourceHeight||i?.chart?.height||e.export?.defaultHeight||400,width:e.export?.width||r?.sourceWidth||t?.width||i?.exporting?.sourceWidth||i?.chart?.width||e.export?.defaultWidth||600,scale:o};for(let[e,t]of Object.entries(s))s[e]="string"==typeof t?+t.replace(/px|%/gi,""):t;return s},qe=async(t,r,i,o)=>{let{export:s,customLogic:n}=t;const a="boolean"==typeof n.allowCodeExecution?n.allowCodeExecution:Fe;if(n){if(a)if("string"==typeof t.customLogic.resources)t.customLogic.resources=W(t.customLogic.resources,B(t.customLogic.allowFileResources));else if(!t.customLogic.resources)try{const r=e.readFileSync("resources.json","utf8");t.customLogic.resources=W(r,B(t.customLogic.allowFileResources))}catch(e){G(2,e,"[chart] Unable to load the default resources.json file.")}}else n=t.customLogic={};if(!a&&n){if(n.callback||n.resources||n.customCode)return i(new ne("[chart] The 'callback', 'resources' and 'customCode' options have been disabled for this server."));n.callback=!1,n.resources=!1,n.customCode=!1}if(r&&(r.chart=r.chart||{},r.exporting=r.exporting||{},r.exporting.enabled=!1),s.constr=s.constr||"chart",s.type=V(s.type,s.outfile),"svg"===s.type&&(s.width=!1),["globalOptions","themeOptions"].forEach((t=>{try{s&&s[t]&&("string"==typeof s[t]&&s[t].endsWith(".json")?s[t]=X(e.readFileSync(s[t],"utf8"),!0):s[t]=X(s[t],!0))}catch(e){s[t]={},G(2,e,`[chart] The '${t}' cannot be loaded.`)}})),n.allowCodeExecution)try{n.customCode=Y(n.customCode,n.allowFileResources)}catch(e){G(2,e,"[chart] The 'customCode' cannot be loaded.")}if(n&&n.callback&&n.callback?.indexOf("{")<0)if(n.allowFileResources)try{n.callback=e.readFileSync(n.callback,"utf8")}catch(e){n.callback=!1,G(2,e,"[chart] The 'callback' cannot be loaded.")}else n.callback=!1;t.export={...t.export,...Me(t)};try{return i(!1,await $e(s.strInj||r||o,t))}catch(e){return i(e)}},De=(e,t)=>{try{let r,i=e.export.instr||e.export.options;return"string"!=typeof i&&(r=i=K(i,e.customLogic?.allowCodeExecution)),r=i.replaceAll(/\t|\n|\r/g,"").trim(),";"===r[r.length-1]&&(r=r.substring(0,r.length-1)),e.export.strInj=r,qe(e,!1,t)}catch(r){return t(new ne(`[chart] Malformed input detected for ${e.export?.requestId||"?"}. Please make sure that your JSON/JavaScript options are sent using the "options" attribute, and that if you're using SVG, it is unescaped.`).setError(r))}},Ve=(e,t,r)=>{const{allowCodeExecution:i}=t.customLogic;if(e.indexOf("<svg")>=0||e.indexOf("<?xml")>=0)return F(4,"[chart] Parsing input as SVG."),qe(t,!1,r,e);try{const i=JSON.parse(e.replaceAll(/\t|\n|\r/g," "));return qe(t,i,r)}catch(e){return B(i)?De(t,r):r(new ne("[chart] Only JSON configurations and SVG are allowed for this server. If this is your server, JavaScript custom code can be enabled by starting the server with the --allowCodeExecution flag.").setError(e))}},We=[],Xe=()=>{F(4,"[server] Clearing all registered intervals.");for(const e of We)clearInterval(e)},ze=(e,t,r,i)=>{G(1,e),"development"!==$.OTHER_NODE_ENV&&delete e.stack,i(e)},Ke=(e,t,r,i)=>{const{statusCode:o,status:s,message:n,stack:a}=e,l=o||s||500;r.status(l).json({statusCode:l,message:n,stack:a})};var Je=(e,t)=>{const r="Too many requests, you have been rate limited. Please try again later.",i={max:t.maxRequests||30,window:t.window||1,delay:t.delay||0,trustProxy:t.trustProxy||!1,skipKey:t.skipKey||!1,skipToken:t.skipToken||!1};i.trustProxy&&e.enable("trust proxy");const o=w({windowMs:60*i.window*1e3,max:i.max,delayMs:i.delay,handler:(e,t)=>{t.format({json:()=>{t.status(429).send({message:r})},default:()=>{t.status(429).send(r)}})},skip:e=>!1!==i.skipKey&&!1!==i.skipToken&&e.query.key===i.skipKey&&e.query.access_token===i.skipToken&&(F(4,"[rate limiting] Skipping rate limiter."),!0)});e.use(o),F(3,`[rate limiting] Enabled rate limiting with ${i.max} requests per ${i.window} minute for each IP, trusting proxy: ${i.trustProxy}.`)};class Be extends ne{constructor(e,t){super(e),this.status=this.statusCode=t}setStatus(e){return this.status=e,this}}const Ye={png:"image/png",jpeg:"image/jpeg",gif:"image/gif",pdf:"application/pdf",svg:"image/svg+xml"};let Qe=0;const Ze=[],et=[],tt=(e,t,r,i)=>{let o=!0;const{id:s,uniqueId:n,type:a,body:l}=i;return e.some((e=>{if(e){let i=e(t,r,s,n,a,l);return void 0!==i&&!0!==i&&(o=i),!0}})),o},rt=async(e,t,r)=>{try{const r=Q(),o=p.v4().replace(/-/g,""),s=ee(),n=e.body,a=++Qe;let l=V(n.type);if(!n||"object"==typeof(i=n)&&!Array.isArray(i)&&null!==i&&0===Object.keys(i).length)throw new Be("The request body is required. Please ensure that your Content-Type header is correct (accepted types are application/json and multipart/form-data).",400);let c=X(n.infile||n.options||n.data);if(!c&&!n.svg)throw F(2,`The request with ID ${o} from ${e.headers["x-forwarded-for"]||e.connection.remoteAddress} was incorrect. Payload received: ${JSON.stringify(n)}.`),new Be("No correct chart data found. Ensure that you are using either application/json or multipart/form-data headers. If sending JSON, make sure the chart data is in the 'infile', 'options', or 'data' attribute. If sending SVG, ensure it is in the 'svg' attribute.",400);let h=!1;if(h=tt(Ze,e,t,{id:a,uniqueId:o,type:l,body:n}),!0!==h)return t.send(h);let u=!1;e.socket.on("close",(()=>{u=!0})),F(4,`[export] Got an incoming HTTP request with ID ${o}.`),n.constr="string"==typeof n.constr&&n.constr||"chart";const d={export:{instr:c,type:l,constr:n.constr[0].toLowerCase()+n.constr.substr(1),height:n.height,width:n.width,scale:n.scale||s.export.scale,globalOptions:X(n.globalOptions,!0),themeOptions:X(n.themeOptions,!0)},customLogic:{allowCodeExecution:Fe,allowFileResources:!1,resources:X(n.resources,!0),callback:n.callback,customCode:n.customCode}};c&&(d.export.instr=K(c,d.customLogic.allowCodeExecution));const g=te(s,d);if(g.export.options=c,g.payload={svg:n.svg||!1,b64:n.b64||!1,noDownload:n.noDownload||!1,requestId:o},n.svg&&(e=>[/xlink:href="(?:http:\/\/|https:\/\/)?localhost\b/,/xlink:href="(?:http:\/\/|https:\/\/)?10\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/,/xlink:href="(?:http:\/\/|https:\/\/)?127\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/,/xlink:href="(?:http:\/\/|https:\/\/)?172\.(1[6-9]|2[0-9]|3[0-1])\.\d{1,3}\.\d{1,3}\b/,/xlink:href="(?:http:\/\/|https:\/\/)?192\.168\.\d{1,3}\.\d{1,3}\b/].some((t=>t.test(e))))(g.payload.svg))throw new Be("SVG potentially contain at least one forbidden URL in xlink:href element. Please review the SVG content and ensure that all referenced URLs comply with security policies.",400);await Ge(g,((i,c)=>{if(e.socket.removeAllListeners("close"),s.server.benchmarking&&F(5,`[benchmark] Request with ID ${o} - After the whole exporting process: ${r()}ms.`),u)return F(3,"[export] The client closed the connection before the chart finished processing.");if(i)throw i;if(!c||!c.result)throw new Be(`Unexpected return from chart generation. Please check your request data. For the request with ID ${o}, the result is ${c.result}.`,400);return l=c.options.export.type,tt(et,e,t,{id:a,body:c.result}),c.result?n.b64?"pdf"===l||"svg"==l?t.send(Buffer.from(c.result,"utf8").toString("base64")):t.send(c.result):(t.header("Content-Type",Ye[l]||"image/png"),n.noDownload||t.attachment(`${e.params.filename||e.body.filename||"chart"}.${l||"png"}`),"svg"===l?t.send(c.result):t.send(Buffer.from(c.result,"base64"))):void 0}))}catch(e){r(e)}var i};const it=JSON.parse(e.readFileSync(t.join(D,"package.json"))),ot=new Date,st=[];function nt(e){if(!e)return!1;var t;t=setInterval((()=>{const e=Ue(),t=0===e.exportAttempts?1:e.performedExports/e.exportAttempts*100;st.push(t),st.length>30&&st.shift()}),6e4),We.push(t),e.get("/health",((e,t)=>{const r=Ue(),i=st.length,o=st.reduce(((e,t)=>e+t),0)/st.length;F(4,"[health.js] GET /health [200] - returning server health."),t.send({status:"OK",bootTime:ot,uptime:Math.floor(((new Date).getTime()-ot.getTime())/1e3/60)+" minutes",version:it.version,highchartsVersion:me(),averageProcessingTime:r.spentAverage,performedExports:r.performedExports,failedExports:r.droppedExports,exportAttempts:r.exportAttempts,sucessRatio:r.performedExports/r.exportAttempts*100,pool:je(),period:i,movingAverage:o,message:`Last ${i} minutes had a success rate of ${o.toFixed(2)}%.`,svgExportAttempts:r.exportFromSvgAttempts,jsonExportAttempts:r.performedExports-r.exportFromSvgAttempts})}))}const at=new Map,lt=v();lt.disable("x-powered-by"),lt.use(f());const ct=y.memoryStorage(),pt=y({storage:ct,limits:{fieldSize:52428800}});lt.use(v.json({limit:52428800})),lt.use(v.urlencoded({extended:!0,limit:52428800})),lt.use(pt.none());const ht=e=>{e.on("clientError",(e=>{G(1,e,`[server] Client error: ${e.message}`)})),e.on("error",(e=>{G(1,e,`[server] Server error: ${e.message}`)})),e.on("connection",(e=>{e.on("error",(e=>{G(1,e,`[server] Socket error: ${e.message}`)}))}))},ut=async r=>{try{if(!r.enable)return!1;if(!r.ssl.force){const e=a.createServer(lt);ht(e),e.listen(r.port,r.host),at.set(r.port,e),F(3,`[server] Started HTTP server on ${r.host}:${r.port}.`)}if(r.ssl.enable){let i,o;try{i=await e.promises.readFile(t.posix.join(r.ssl.certPath,"server.key"),"utf8"),o=await e.promises.readFile(t.posix.join(r.ssl.certPath,"server.crt"),"utf8")}catch(e){F(2,`[server] Unable to load key/certificate from the '${r.ssl.certPath}' path. Could not run secured layer server.`)}if(i&&o){const e=l.createServer({key:i,cert:o},lt);ht(e),e.listen(r.ssl.port,r.host),at.set(r.ssl.port,e),F(3,`[server] Started HTTPS server on ${r.host}:${r.ssl.port}.`)}}r.rateLimiting&&r.rateLimiting.enable&&![0,NaN].includes(r.rateLimiting.maxRequests)&&Je(lt,r.rateLimiting),lt.use(v.static(t.posix.join(D,"public"))),nt(lt),(e=>{e.post("/",rt),e.post("/:filename",rt)})(lt),(e=>{!!e&&e.get("/",((e,r)=>{r.sendFile(t.join(D,"public","index.html"))}))})(lt),(e=>{!!e&&e.post("/version/change/:newVersion",(async(e,t,r)=>{try{const r=$.HIGHCHARTS_ADMIN_TOKEN;if(!r||!r.length)throw new Be("The server is not configured to perform run-time version changes: HIGHCHARTS_ADMIN_TOKEN is not set.",401);const i=e.get("hc-auth");if(!i||i!==r)throw new Be("Invalid or missing token: Set the token in the hc-auth header.",401);const o=e.params.newVersion;if(!o)throw new Be("No new version supplied.",400);try{await de(o)}catch(e){throw new Be(`Version change: ${e.message}`,e.statusCode).setError(e)}t.status(200).send({statusCode:200,version:me(),message:`Successfully updated Highcharts to version: ${o}.`})}catch(e){r(e)}}))})(lt),(e=>{e.use(ze),e.use(Ke)})(lt)}catch(e){throw new ne("[server] Could not configure and start the server.").setError(e)}},dt=()=>{F(4,"[server] Closing all servers.");for(const[e,t]of at)t.close((()=>{F(4,`[server] Closed server on port: ${e}.`)}))};var gt={startServer:ut,closeServers:dt,getServers:()=>at,enableRateLimiting:e=>Je(lt,e),getExpress:()=>v,getApp:()=>lt,use:(e,...t)=>{lt.use(e,...t)},get:(e,...t)=>{lt.get(e,...t)},post:(e,...t)=>{lt.post(e,...t)}};const mt=async e=>{await Promise.allSettled([Xe(),dt(),Pe()]),process.exit(e)};var ft={server:gt,startServer:ut,initExport:async e=>{var t;return t=e.customLogic&&e.customLogic.allowCodeExecution,Fe=B(t),(e=>{M(e&&parseInt(e.level)),e&&e.dest&&q(e.dest,e.file||"highcharts-export-server.log")})(e.logging),e.other.listenToProcessExits&&(F(3,"[process] Attaching exit listeners to the process."),process.on("exit",(e=>{F(4,`Process exited with code ${e}.`)})),process.on("SIGINT",(async(e,t)=>{F(4,`The ${e} event with code: ${t}.`),await mt(0)})),process.on("SIGTERM",(async(e,t)=>{F(4,`The ${e} event with code: ${t}.`),await mt(0)})),process.on("SIGHUP",(async(e,t)=>{F(4,`The ${e} event with code: ${t}.`),await mt(0)})),process.on("uncaughtException",(async(e,t)=>{G(1,e,`The ${t} error.`),await mt(1)}))),await he(e),await Ne({pool:e.pool||{minWorkers:1,maxWorkers:1},puppeteerArgs:e.puppeteer?.args||[]}),e},singleExport:async t=>{t.export.instr=t.export.instr||t.export.options,await Ge(t,(async(t,r)=>{if(t)throw t;const{outfile:i,type:o}=r.options.export;e.writeFileSync(i||`chart.${o}`,"svg"!==o?Buffer.from(r.result,"base64"):r.result),await Pe()}))},batchExport:async t=>{const r=[];for(let i of t.export.batch.split(";"))i=i.split("="),2===i.length&&r.push(Ge({...t,export:{...t.export,infile:i[0],outfile:i[1]}},((t,r)=>{if(t)throw t;e.writeFileSync(r.options.export.outfile,"svg"!==r.options.export.type?Buffer.from(r.result,"base64"):r.result)})));try{await Promise.all(r),await Pe()}catch(e){throw new ne("[chart] Error encountered during batch export.").setError(e)}},startExport:Ge,setOptions:(t,r)=>(r?.length&&(Z=function(t){const r=t.findIndex((e=>"loadConfig"===e.replace(/-/g,"")));if(r>-1&&t[r+1]){const i=t[r+1];try{if(i&&i.endsWith(".json"))return JSON.parse(e.readFileSync(i))}catch(e){G(2,e,`[config] Unable to load the configuration from the ${i} file.`)}}return{}}(r)),re(x,Z),Z=ie(x),t&&(Z=te(Z,t,L)),r?.length&&(Z=function(e,t,r){let i=!1;for(let o=0;o<t.length;o++){const s=t[o].replace(/-/g,""),n=k[s]?k[s].split("."):[];let a;n.reduce(((e,t,r)=>(n.length-1===r&&(a=e[t].type),e[t])),r),n.reduce(((e,r,l)=>(n.length-1===l&&void 0!==e[r]&&(t[++o]?"boolean"===a?e[r]=B(t[o]):"number"===a?e[r]=+t[o]:a.indexOf("]")>=0?e[r]=t[o].split(","):e[r]=t[o]:(F(2,`[config] Missing value for the '${s}' argument. Using the default value.`),i=!0)),e[r])),e)}i&&J();return e}(Z,r,x)),Z),shutdownCleanUp:mt,log:F,logWithStack:G,setLogLevel:M,enableFileLogging:q,mapToNewConfig:e=>{const t={};for(const[r,i]of Object.entries(e)){const e=k[r]?k[r].split("."):[];e.reduce(((t,r,o)=>t[r]=e.length-1===o?i:t[r]||{}),t)}return t},manualConfig:async t=>{let r={};e.existsSync(t)&&(r=JSON.parse(e.readFileSync(t,"utf8")));const o=Object.keys(R).map((e=>({title:`${e} options`,value:e})));return i({type:"multiselect",name:"category",message:"Which category do you want to configure?",hint:"Space: Select specific, A: Select all, Enter: Confirm.",instructions:"",choices:o},{onSubmit:async(o,s)=>{let n=0,a=[];for(const e of s)R[e]=R[e].map((t=>({...t,section:e}))),a=[...a,...R[e]];return await i(a,{onSubmit:async(i,o)=>{if("moduleScripts"===i.name?(o=o.length?o.map((e=>i.choices[e])):i.choices,r[i.section][i.name]=o):r[i.section]=oe(Object.assign({},r[i.section]||{}),i.name.split("."),i.choices?i.choices[o]:o),++n===a.length){try{await e.promises.writeFile(t,JSON.stringify(r,null,2),"utf8")}catch(e){G(1,e,`[config] An error occurred while creating the ${t} file.`)}return!0}}}),!0}})},printLogo:r=>{const i=JSON.parse(e.readFileSync(t.join(D,"package.json"))).version;r?console.log(`Starting Highcharts Export Server v${i}...`):console.log(e.readFileSync(D+"/msg/startup.msg").toString().bold.yellow,`v${i}`)},printUsage:J};module.exports=ft;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
